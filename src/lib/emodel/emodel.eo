class Emodel (Eo_Base)
{
  legacy_prefix: null;
  methods {

    load {
        /*@ Load emodel.
          By convention this means loading data from an external source and populating
          the models properties and children with it. For example in the case of file
          system backed model, this means opening the relevant files and reading the
          data from them(creating the properties and children from it).
          @warning This convention should be followed, but no guarantees of behaviour
          by user defined types can be given.
          @see emodel_unload
          */
        /**
         * @def emodel_load
         * @since 1.11
         */
    }
    unload {
        /*@ Unload emodel.

          By convention this means releasing data gotten from an external source. For
          example of a database backed model this might mean releasing the iterator for
          the currently loaded data or deleting a temporary table.
          @warning This convention should be followed, but no guarantees of behaviour
          by user defined types can be given.
          @see emodel_load
          */
        /**
         * @def emodel_unload
         * @since 1.11
         */
    }
    child_select_set {
        /*@ Select a child.
          @see EMODEL_EVENT_CHILD_SELECTED */
        /**
         * @def emodel_child_select_set
         * @since 1.11
         *
         * @in child
         */
        params {
            Eo *child; /*@ Child to be selected from the model. */
        }
    }
    child_select_get {
        /*@ Get current selected child.
          @see EMODEL_EVENT_CHILD_SELECTED */
        /**
         * @def emodel_child_select_get
         * @since 1.11
         *
         */
    }
    properties_get {
        /*@ Get properties list from model.
          Properties are functionalities especific of concrete implementation.
          @see EMODEL_EVENT_PROPERTIES_CHANGE */
        /**
         * @def emodel_properties_get
         * @since 1.11
         */
    }
    property_get {
        /*@ Get property from given property name.
          @see EMODEL_EVENT_PROPERTY_CHANGE */
        /**
         * @def emodel_property_get
         * @since 1.11
         *
         * @in property
         *
         */
         params {
           const char* property; /*@ Property name */
         }
    }
    property_set {
        /*@ Get property value from given property name.
          @see EMODEL_EVENT_PROPERTY_CHANGE */
        /**
         * @def emodel_property_set
         * @since 1.11
         *
         * @in property
         * @in value
         *
         */
         params {
           const char* property; /*@  Property name */
           Eina_Value* value; /*@ New value */
         }
    }
    child_del {
       /*@ Delete child. What exactly the child is
         will be defined by concrete implementation.
         @see EMODEL_EVENT_CHILD_DEL */
       /**
        * @def emodel_child_del
        * @since 1.11
        *
        * @in child_del_cb
        * @in child Child
        */
        params {
          Emodel_Cb child_del_cb; /*@  Emodel callback */
          Eo* child; /*@ Child to be deleted */
        }
    }
    children_get {
        /*@ Get children.
          Children will be available from the callback function. */
        /**
         * @def emodel_children_get
         * @since 1.11
         *
         * @in children_get_cb
         * @in data
         */
         params {
           Emodel_Cb children_get_cb; /*@ Emodel callback */
           void* data; /*@ Event data */
         }
    }
    children_slice_get {
        /*@ Get children slice.
          'slice' is a range, for example if we have 20 childs a slice could be 
          the range from 5(start) to 10(count), see:
          child 0  [no]
          child 1  [no]
          child 2  [no]
          child 3  [no]
          child 4  [yes]
          child 5  [yes]
          child 6  [yes]
          child 7  [yes]
          child 8  [yes]
          child 9  [no]
          child 10 [no]
          child 11 [no]
          @see Emodel_Cb
          */
        /**
         * @def emodel_children_slice_get
         * @since 1.11
         *
         * @in children_slice_get_cb
         * @in start
         * @in count
         * @in data
         */
         params {
           Emodel_Cb children_slice_get_cb; /*@ Emodel notification callback. */
           int       start; /*@  Range begin - start from here. */
           int       count; /*@  Range size - up to here.*/
           void     *data; /*@ The child. */
         }
    }
    children_count_get {
        /*@ Count the number of children from model.
          @see EMODEL_EVENT_CHILDREN_COUNT_GET */
        /**
         * @def emodel_children_count_get
         * @since 1.11
         */
    }
  }
  events {
      properties_change(void); /*@ @see emodel_properties_get */
      property_change(void); /*@ @see emodel_property_get
      @see emodel_property_set */
      child_add(void);
      child_del(void); /*@ @see emodel_child_del */
      child_selected(void); /*@ @see emodel_child_select_set
      @see emodel_child_select_get */
      children_get(void);
      children_count_get(void); /*@see emodel_children_count_get */
  }
}

